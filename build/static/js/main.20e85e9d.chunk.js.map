{"version":3,"sources":["components/Container/Container.jsx","redux/phonebook/phonebook-actions.js","redux/phonebook/phonebook-operations.js","redux/phonebook/phonebook-reducer.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactList.container.js","components/Phonebook/Phonebook.jsx","App.js","redux/store.js","index.js"],"names":["Container","children","className","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","changeFilter","axios","defaults","baseURL","dispatch","get","then","data","catch","error","contact","post","id","delete","items","createReducer","_","payload","state","filter","el","loading","combineReducers","ContactForm","name","number","message","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","newContact","uuidv4","props","onSubmit","reset","this","htmlFor","nameInputId","type","title","placeholder","onChange","required","Component","connect","contactsOperations","Filter","contacts","target","protoType","PropTypes","string","func","ContactList","onDelete","map","onClick","getVisibleContacts","allContacts","normalize","toLowerCase","includes","Phonebook","fetchContacts","length","App","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","phonebookReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20e85e9d.chunk.js","sourcesContent":["import './Container.css';\n\nconst Container = ({ children }) => {\n  return <div className=\"Container\">{children}</div>;\n};\n\nexport default Container;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactsRequest = createAction('contacts/addContactsRequest');\nexport const addContactsSuccess = createAction('contacts/addContactsSuccess');\nexport const addContactsError = createAction('contacts/addContactsError');\n\nexport const deleteContactsRequest = createAction(\n  'contacts/deleteContactsRequest',\n);\nexport const deleteContactsSuccess = createAction(\n  'contacts/deleteContactsSuccess',\n);\nexport const deleteContactsError = createAction('contacts/deleteContactsError');\n\nexport const changeFilter = createAction('phonebook/FILTER');\n","import axios from 'axios';\n\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n} from './phonebook-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nconst fetchContacts = () => dispatch => {\n  dispatch(fetchContactsRequest());\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => dispatch(fetchContactsError(error)));\n};\n\nconst addContact = contact => dispatch => {\n  dispatch(addContactsRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => {\n      dispatch(addContactsSuccess(data));\n    })\n    .catch(error => dispatch(addContactsError(error)));\n};\n\nconst deleteContacts = id => dispatch => {\n  dispatch(deleteContactsRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => {\n      dispatch(deleteContactsSuccess(id));\n    })\n    .catch(error => dispatch(deleteContactsError(error)));\n};\n\nexport default { fetchContacts, addContact, deleteContacts };\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n  changeFilter,\n} from './phonebook-actions';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactsSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactsSuccess]: (state, { payload }) =>\n    state.filter(el => el.id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactsRequest]: () => true,\n  [addContactsSuccess]: () => false,\n  [addContactsError]: () => false,\n  [deleteContactsRequest]: () => true,\n  [deleteContactsSuccess]: () => false,\n  [deleteContactsError]: () => false,\n});\n\nconst error = createReducer(null, {});\n\nexport default combineReducers({\n  items,\n  loading,\n  filter,\n  error,\n});\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { connect } from 'react-redux';\nimport { contactsOperations } from '../../redux/phonebook';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n    message: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number, message } = this.state;\n    const id = uuidv4();\n    const newContact = {\n      id: id,\n      name: name,\n      number: number,\n      message: message,\n    };\n    this.props.onSubmit(newContact);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '', message: '' });\n  };\n\n  render() {\n    const { name, number, message } = this.state;\n    return (\n      <div className=\"phonebook\">\n        <form onSubmit={this.handleSubmit} className=\"phonebook-form\">\n          <div className=\"phonebook-input-fielsds\">\n            <label htmlFor={this.nameInputId} className=\"phonebook-label\">\n              <input\n                className=\"phonebook-input\"\n                type=\"text\"\n                name=\"name\"\n                //pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                value={name}\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                placeholder=\"name\"\n                onChange={this.handleChange}\n                required\n              />\n            </label>\n            <label className=\"phonebook-label\">\n              <input\n                className=\"phonebook-input\"\n                type=\"tel\"\n                name=\"number\"\n                value={number}\n                //pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n                placeholder=\"number\"\n                title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n                onChange={this.handleChange}\n                required\n              />\n            </label>\n          </div>\n          <div className=\"msg\">\n            <textarea\n              placeholder=\"more information\"\n              className=\"textarea\"\n              name=\"message\"\n              value={message}\n              onChange={this.handleChange}\n            ></textarea>\n            <button type=\"submit\" className=\"btn\">\n              Add contact\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: contact => dispatch(contactsOperations.addContact(contact)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n  message: PropTypes.string,\n  onSubmit: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { changeFilter } from '../../redux/phonebook';\n\nconst Filter = ({ filter, changeFilter }) => {\n  return (\n    <div className=\"filter\">\n      <label>\n        <input\n          className=\"filter-input\"\n          type=\"text\"\n          value={filter}\n          placeholder=\"find contacts by name...\"\n          onChange={changeFilter}\n        />\n      </label>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  changeFilter: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.protoType = {\n  filter: PropTypes.string,\n  changeFilter: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\n\nconst ContactList = ({ contacts, onDelete }) => {\n  return (\n    <>\n      <ul className=\"contact-list\">\n        {contacts.map(el => (\n          <li key={el.id} className=\"contact-item\">\n            {el.name + ':'}\n            <span className=\"contact-span\">{el.number}</span>\n            <p className=\"contact-message\">{el.message}</p>\n            <button onClick={() => onDelete(el.id)} className=\"btn\">\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape),\n  onDelete: PropTypes.func,\n};\n","import { connect } from 'react-redux';\nimport { contactsOperations } from '../../redux/phonebook';\nimport ContactList from './ContactList';\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalize = filter.toLowerCase();\n\n  return allContacts.filter(el => el.name.toLowerCase().includes(normalize));\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(contactsOperations.deleteContacts(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\nimport { connect } from 'react-redux';\nimport { contactsOperations } from '../../redux/phonebook';\nimport { Component } from 'react';\n\nclass Phonebook extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  render() {\n    const { items } = this.props;\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        {items.length > 0 && (\n          <>\n            <h2>Contacts</h2>\n            <Filter />\n            <ContactList />\n          </>\n        )}\n      </>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  items: state.contacts.items,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Phonebook);\n","import './App.css';\nimport { Component } from 'react';\n\nimport Container from './components/Container/Container';\nimport Phonebook from './components/Phonebook';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <Phonebook />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nimport logger from 'redux-logger';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport phonebookReducer from './phonebook/phonebook-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: phonebookReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\n\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}